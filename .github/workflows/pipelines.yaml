# https://www.youtube.com/watch?v=_Vy631QpfI0
name: Build and Deploy to kubernetes Backend

on:
  push:
    branches:
      # - feature
      - main

env:
  PROJECT_ID: ${{secrets.BALMORAL_SITE_GKE_PROJECTID_SECRET}} # modifiable based from GKE
  GKE_CLUSTER: balm-website-cluster-2 # modifiable based from GKE
  GKE_ZONE: australia-southeast1
  DEPLOYMENT_NAME: balm-backend-gke # need to be the same in deployment.yaml
  IMAGE: balm-backend-gke-image
  # TAG: 1.0.1 # we Change to set the tag by grabbing the last commit info

jobs:
  setup-build-publish-deploy:
    # not modify
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:
      # not modify
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Node Setup
        uses: actions/setup-node@v1
        with:
          node-version: 16
          # cache: 'yarn'

      - name: set env-var Git last commit info as 'TAG'
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
        # https://stackoverflow.com/a/57969570
        run: |-
          echo "TAG=$(git show -1 -s --format=%cd_%h_%an --date=format:'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: TEST - get set env-var Git last commit info WITHOUT curly
        run: |-
          echo "get from env-var WITHOUT curly IS -- $TAG"

      # - name: Build React App
      #   # working-directory: .
      #   run: npm ci
      #   #TODO: is this necessary? as we have this in Dockerfile already

      # - name: Setup JDK 1.8
      #   uses: actions/setup-java@v1
      #   with:
      #     java-version: 1.8
      #     server-id: github # not modify
      #     settings-path: ${{github.workspace}} # not modify

      # - name: Build with Maven # not modify
      #   run: mvn clean package -DskipTests # (not modify until testing)

      # not modify
      - name: Setup Google Cloud Commandline Interface (CLI)
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true # (quickfix for some kinks in setup-gcloud action)
        with:
          service_account_key: ${{secrets.BALMORAL_SITE_GKE_PROJECT_SECRET}}
          # NOTE! this must be the same key as per in Github under your repository name, select (maybe under …)
          # Settings -> Secrets
          project_id: ${{secrets.BALMORAL_SITE_GKE_PROJECTID_SECRET}}

      # not modify
      - name: Configure Docker on Google Cloud
        run: |-
          gcloud --quiet auth configure-docker

      # not modify
      - name: Get GKE Credentials
        run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # not modify (need the last '.')
      - name: Build Docker image
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$IMAGE:$TAG" .

      # not modify
      - name: Publish Docker Image to Google Container Registry (GCR)
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"

      - name:
          Set up Kustomize
          # watch out here
          # https://medium.com/wearewebera/kubernetes-development-workflow-with-skaffold-kustomize-and-kind-12d4a72a2cbf
          # https://kubectl.docs.kubernetes.io/installation/kustomize/binaries/
          # https://weaveworks-gitops.awsworkshop.io/20_weaveworks_prerequisites/15_install_kustomize.html
        # chmod a+x kustomize*
        # mv kustomize* kustomize
        # https://github.com/kubernetes-sigs/kustomize/issues/1680#issuecomment-545310809
        run: |-
          rm -f kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          chmod a+x ./kustomize

      # 'gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG'
      #   where $PROJECT_ID $IMAGE $TAG are from above 'env:'
      #     IMAGE_FIX: tradingsys_fix
      #     IMAGE_ALGO: tradingsys_algo
      #     TAG: 1.0.0
      # below is corresponding to spec - template - spec - image field
      # in deployment.yaml.
      # Kustomize is trying to find ‘gcr.io/PROJECT_ID/IMAGE:TAG’ in its ‘resources’
      # (defined in customization.xml, which includes deployment.xml
      # and service xml in this case). it will be
      # replaced by kustomize with the latest <name>:<tag> value represented
      # by gcr.io/$PROJECT_ID/$IMAGE:$TAG
      # This keeps <name>:<tag> value of the image up-to-date whenever we build
      # and deploy again.
      # kubectl apply -f - : '-' is the 'previous folder location'
      # (https://stackoverflow.com/questions/8045479/whats-the-magic-of-a-dash-in-command-line-parameters)

      # below line 'kubectl rollout status deployment/$DEPLOYMENT_NAME'
      # will result in "Error from server (NotFound): deployments.apps "balm-frontend-gke" not found"
      # if we don't keep the name of the deployment the same as $DEPLOYMENT_NAME
      - name: Customize and Deploy Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG="gcr.io/$PROJECT_ID/$IMAGE:$TAG"
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME 
          kubectl get services -o wide

      # TODO: consider using kubectl rollout status deployment/test-deploy
      #   but it seems to be only applicable for against existing deployment on the cloud not against dir/files
      #   https://medium.com/the-programmer/working-with-deployments-roll-back-and-rolling-updates-bb4299488e34
